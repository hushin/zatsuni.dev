---
import { getCollection } from "astro:content";
import type { GetStaticPaths } from "astro";
import BaseLayout from "../../layouts/BaseLayout.astro";
import Card from "../../components/Card.astro";
import { slugifyStr } from "../../utils/slugify";
import { SITE } from "../../config";

export const getStaticPaths = (async () => {
  // 記事を取得（下書きとスケジュール投稿は除外）
  const allPosts = await getCollection("blog", ({ data }) => {
    return !data.draft && data.pubDatetime <= new Date();
  });

  // 全てのタグを収集
  const allTags = new Set<string>();
  allPosts.forEach(post => {
    post.data.tags?.forEach(tag => {
      allTags.add(tag);
    });
  });

  // 各タグごとのパスを生成
  return Array.from(allTags).map(tag => ({
    params: { tag: slugifyStr(tag) },
    props: {
      tag,
      posts: allPosts
        .filter(post => post.data.tags?.includes(tag))
        .sort(
          (a, b) => b.data.pubDatetime.valueOf() - a.data.pubDatetime.valueOf()
        ),
    },
  }));
}) satisfies GetStaticPaths;

const { tag, posts } = Astro.props;

// 年別にグループ化
const postsByYear = posts.reduce(
  (acc, post) => {
    const year = post.data.pubDatetime.getFullYear().toString();
    if (!acc[year]) {
      acc[year] = [];
    }
    acc[year].push(post);
    return acc;
  },
  {} as Record<string, typeof posts>
);

// 年のリストを新しい順にソート
const years = Object.keys(postsByYear).sort(
  (a, b) => parseInt(b) - parseInt(a)
);

// ページタイトルとメタ情報
const totalPosts = posts.length;
const pageTitle = `タグ「${tag}」の記事一覧`;
const pageDescription = `${SITE.desc} - ${pageTitle}。${totalPosts}件の記事があります。`;
---

<BaseLayout title={pageTitle} description={pageDescription}>
  <div class="container mx-auto max-w-4xl px-4 py-8">
    <!-- パンくずナビゲーション -->
    <nav class="breadcrumbs mb-6 text-sm">
      <ul>
        <li><a href="/" class="link link-hover">ホーム</a></li>
        <li><a href="/tags/" class="link link-hover">タグ一覧</a></li>
        <li class="text-base-content/70">{tag}</li>
      </ul>
    </nav>

    <!-- ページヘッダー -->
    <div class="mb-8">
      <div class="flex items-center justify-between">
        <h1 class="text-base-content text-3xl font-bold">
          タグ「{tag}」の記事一覧
        </h1>
        <span class="text-base-content/70 text-sm">
          {totalPosts}件
        </span>
      </div>
    </div>

    {
      posts.length > 0 ? (
        <div class="space-y-12">
          {years.map(year => (
            <section>
              <h2 class="text-base-content border-base-300 mb-6 border-b pb-2 text-2xl font-bold">
                {year}年
              </h2>
              <ul class="space-y-0">
                {postsByYear[year].map(post => (
                  <Card href={`/posts/${post.id}/`} frontmatter={post.data} />
                ))}
              </ul>
            </section>
          ))}
        </div>
      ) : (
        <div class="py-12 text-center">
          <p class="text-base-content/70">このタグの記事はまだありません。</p>
          <a href="/tags/" class="btn btn-primary btn-sm mt-4">
            タグ一覧に戻る
          </a>
        </div>
      )
    }

    <!-- フッターナビゲーション -->
    <div class="mt-12 text-center">
      <a href="/tags/" class="btn btn-outline btn-sm">タグ一覧に戻る</a>
    </div>
  </div>
</BaseLayout>
