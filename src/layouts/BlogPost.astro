---
import type { CollectionEntry } from "astro:content";
import BaseLayout from "./BaseLayout.astro";
import Datetime from "../components/Datetime.astro";
import Tag from "../components/Tag.astro";
import ShareLinks from "@components/ShareLinks.astro";

type Props = CollectionEntry<"blog">["data"];

const { title, description, pubDatetime, modDatetime, tags = [] } = Astro.props;
---

<BaseLayout title={title} description={description}>
  <div class="mx-auto max-w-4xl space-y-8 px-4 py-8 sm:px-6 lg:px-8">
    <article>
      <!-- 記事ヘッダー -->
      <header class="border-base-300 mb-8 border-b pb-8">
        <h1 class="text-3xl leading-tight font-bold sm:text-3xl lg:text-4xl">
          {title}
        </h1>

        <div class="mt-4">
          <Datetime
            pubDatetime={pubDatetime}
            modDatetime={modDatetime}
            size="md"
            showTime={true}
          />
        </div>
      </header>

      <!-- 記事本文 -->
      <div class="prose mx-auto max-w-none">
        <slot />
      </div>
    </article>

    {
      tags && tags.length > 0 && (
        <div>
          <h2 class="sr-only">タグ</h2>
          <div class="flex flex-wrap gap-2">
            {tags.map(tag => (
              <Tag
                tag={tag}
                href={`/tags/${tag}/`}
                size="md"
                variant="outline"
                className="hover:badge-primary"
              />
            ))}
          </div>
        </div>
      )
    }
    <ShareLinks title={title} />
  </div>
  <!-- 画像拡大表示用のモーダル -->
  <dialog id="imageModal" class="modal">
    <div class="modal-box h-auto w-auto max-w-none p-0">
      <form method="dialog">
        <button
          class="btn btn-sm btn-circle btn-ghost absolute top-2 right-2 z-10"
          >✕</button
        >
      </form>
      <img
        id="modalImage"
        src=""
        alt=""
        class="h-auto max-h-[90vh] w-full object-contain"
      />
    </div>
  </dialog>
</BaseLayout>

<script>
  // 画像クリック時の拡大表示機能
  document.addEventListener("DOMContentLoaded", function () {
    const modal = document.getElementById("imageModal") as HTMLDialogElement;
    const modalImage = document.getElementById(
      "modalImage"
    ) as HTMLImageElement;

    // 記事内の画像にクリックイベントを追加
    const images = document.querySelectorAll("article img");
    images.forEach(img => {
      if (img instanceof HTMLImageElement) {
        img.style.cursor = "pointer";
        img.addEventListener("click", function () {
          modalImage.src = img.src;
          modalImage.alt = img.alt;
          modal.showModal();
        });
      }
    });

    /** Attaches links to headings in the document,
     *  allowing sharing of sections easily */
    function addHeadingLinks() {
      const headings = Array.from(
        document.querySelectorAll("h2, h3, h4, h5, h6")
      );
      for (const heading of headings) {
        heading.classList.add("group");
        const link = document.createElement("a");
        link.className =
          "heading-link ml-2 opacity-0 group-hover:opacity-100 focus:opacity-100 text-primary";
        link.href = "#" + heading.id;

        const span = document.createElement("span");
        span.ariaHidden = "true";
        span.innerText = "#";
        link.appendChild(span);
        heading.appendChild(link);
      }
    }
    addHeadingLinks();

    /** Attaches copy buttons to code blocks in the document,
     * allowing users to copy code easily. */
    function attachCopyButtons() {
      const copyButtonLabel = "Copy";
      const codeBlocks = Array.from(document.querySelectorAll("pre"));

      for (const codeBlock of codeBlocks) {
        const wrapper = document.createElement("div");
        wrapper.style.position = "relative";

        const copyButton = document.createElement("button");
        copyButton.className =
          "copy-code absolute right-3 -top-3 rounded bg-base-200 px-2 py-1 text-xs leading-4 text-base-content font-medium hover:bg-base-300 transition-colors";
        copyButton.innerHTML = copyButtonLabel;
        codeBlock.setAttribute("tabindex", "0");
        codeBlock.appendChild(copyButton);

        // wrap codeblock with relative parent element
        codeBlock?.parentNode?.insertBefore(wrapper, codeBlock);
        wrapper.appendChild(codeBlock);

        copyButton.addEventListener("click", async () => {
          await copyCode(codeBlock, copyButton);
        });
      }

      async function copyCode(block: HTMLElement, button: HTMLButtonElement) {
        const code = block.querySelector("code");
        const text = code?.innerText;

        await navigator.clipboard.writeText(text ?? "");

        // visual feedback that task is completed
        button.innerText = "Copied";

        setTimeout(() => {
          button.innerText = copyButtonLabel;
        }, 700);
      }
    }
    attachCopyButtons();
  });
</script>
