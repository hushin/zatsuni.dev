---
import { LOCALE } from "@config";

interface DatetimesProps {
  pubDatetime: string | Date;
  modDatetime: string | Date | undefined | null;
}

interface Props extends DatetimesProps {
  size?: "xs" | "sm" | "md" | "lg";
  className?: string;
  showIcon?: boolean;
  variant?: "default" | "badge";
  showTime?: boolean;
}

const {
  pubDatetime,
  modDatetime,
  size = "sm",
  className = "",
  showIcon = true,
  variant = "default",
  showTime = false,
} = Astro.props;

const myDatetime = new Date(
  modDatetime && modDatetime > pubDatetime ? modDatetime : pubDatetime
);

const date = myDatetime.toLocaleDateString(LOCALE.langTag, {
  year: "numeric",
  month: "short",
  day: "numeric",
});

const time = myDatetime.toLocaleTimeString(LOCALE.langTag, {
  hour: "2-digit",
  minute: "2-digit",
});

const sizeClasses = {
  xs: "text-xs",
  sm: "text-sm",
  md: "text-base",
  lg: "text-lg",
};

const iconSizeClasses = {
  xs: "h-3 w-3",
  sm: "h-4 w-4",
  md: "h-5 w-5",
  lg: "h-6 w-6",
};

const isUpdated = modDatetime && modDatetime > pubDatetime;
---

{
  variant === "badge" ? (
    <div class={`badge badge-ghost badge-sm gap-1 ${className}`.trim()}>
      {showIcon && (
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class={`${iconSizeClasses[size]} fill-current`}
          viewBox="0 0 24 24"
          aria-hidden="true"
        >
          <path d="M7 11h2v2H7zm0 4h2v2H7zm4-4h2v2h-2zm0 4h2v2h-2zm4-4h2v2h-2zm0 4h2v2h-2z" />
          <path d="M5 22h14c1.103 0 2-.897 2-2V6c0-1.103-.897-2-2-2h-2V2h-2v2H9V2H7v2H5c-1.103 0-2 .897-2 2v14c0 1.103.897 2 2 2zM19 8l.001 12H5V8h14z" />
        </svg>
      )}
      <time datetime={myDatetime.toISOString()} class={sizeClasses[size]}>
        {date}
      </time>
    </div>
  ) : (
    <div
      class={`text-base-content/70 flex items-center gap-2 ${className}`.trim()}
    >
      {showIcon && (
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class={`${iconSizeClasses[size]} shrink-0 fill-current`}
          viewBox="0 0 24 24"
          aria-hidden="true"
        >
          <path d="M7 11h2v2H7zm0 4h2v2H7zm4-4h2v2h-2zm0 4h2v2h-2zm4-4h2v2h-2zm0 4h2v2h-2z" />
          <path d="M5 22h14c1.103 0 2-.897 2-2V6c0-1.103-.897-2-2-2h-2V2h-2v2H9V2H7v2H5c-1.103 0-2 .897-2 2v14c0 1.103.897 2 2 2zM19 8l.001 12H5V8h14z" />
        </svg>
      )}

      <div class={`flex items-center gap-1 ${sizeClasses[size]}`}>
        {isUpdated ? (
          <span class="text-warning font-medium">Updated:</span>
        ) : (
          <span class="sr-only">Published:</span>
        )}

        <time datetime={myDatetime.toISOString()}>{date}</time>

        {showTime && (
          <>
            <span aria-hidden="true" class="text-base-content/50">
              â€¢
            </span>

            <span class="text-nowrap">
              <span class="sr-only">at </span>
              {time}
            </span>
          </>
        )}
      </div>
    </div>
  )
}
