---
import { slugifyStr } from "@utils/slugify";
import Datetime from "./Datetime.astro";
import type { CollectionEntry } from "astro:content";

export interface Props {
  href?: string;
  frontmatter: CollectionEntry<"blog">["data"];
  secHeading?: boolean;
  variant?: "compact" | "full";
}

const {
  href,
  frontmatter,
  secHeading = true,
  variant = "compact",
} = Astro.props;
const { title, pubDatetime, modDatetime, description, tags, featured } =
  frontmatter;

const headerProps = {
  style: `view-transition-name: ${slugifyStr(title)}`,
  class: "card-title text-lg font-semibold",
};
---

{
  variant === "compact" ? (
    <li class="mb-6">
      <div class="card bg-base-100 border-base-300 border">
        <div class="card-body p-6">
          <a href={href} class="group">
            {secHeading ? (
              <h2
                {...headerProps}
                class="card-title group-hover:text-primary text-lg font-semibold transition-colors"
              >
                {title}
                {featured && (
                  <div class="badge badge-primary badge-sm">Featured</div>
                )}
              </h2>
            ) : (
              <h3
                {...headerProps}
                class="card-title group-hover:text-primary text-lg font-semibold transition-colors"
              >
                {title}
                {featured && (
                  <div class="badge badge-primary badge-sm">Featured</div>
                )}
              </h3>
            )}
          </a>

          <Datetime pubDatetime={pubDatetime} modDatetime={modDatetime} />

          {description && (
            <p class="text-base-content/80 mt-2 line-clamp-2 text-sm">
              {description}
            </p>
          )}

          {tags && tags.length > 0 && (
            <div class="card-actions mt-4 justify-start">
              {tags.slice(0, 3).map((tag: string) => (
                <div class="badge badge-outline badge-xs">{tag}</div>
              ))}
              {tags.length > 3 && (
                <div class="badge badge-ghost badge-xs">+{tags.length - 3}</div>
              )}
            </div>
          )}
        </div>
      </div>
    </li>
  ) : (
    <li class="mb-8">
      <div class="card bg-base-100 shadow-sm transition-shadow duration-300 hover:shadow-lg">
        <div class="card-body p-8">
          <a href={href} class="group">
            {secHeading ? (
              <h2
                {...headerProps}
                class="card-title group-hover:text-primary text-xl font-bold transition-colors"
              >
                {title}
                {featured && <div class="badge badge-primary">Featured</div>}
              </h2>
            ) : (
              <h3
                {...headerProps}
                class="card-title group-hover:text-primary text-xl font-bold transition-colors"
              >
                {title}
                {featured && <div class="badge badge-primary">Featured</div>}
              </h3>
            )}
          </a>

          <Datetime pubDatetime={pubDatetime} modDatetime={modDatetime} />

          {description && (
            <p class="text-base-content/80 mt-4">{description}</p>
          )}

          {tags && tags.length > 0 && (
            <div class="card-actions mt-6 justify-start">
              {tags.map((tag: string) => (
                <div class="badge badge-outline">{tag}</div>
              ))}
            </div>
          )}
        </div>
      </div>
    </li>
  )
}
